# -*- coding: utf-8 -*-
"""Student Mark Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ha4SPTCD5snAOxFBJQFPnk52D28Xc91G

# Import Libraries
"""

import pandas as pd #For read/write operations on csv file
import numpy as np #For numerical tasks
import matplotlib.pyplot as plt #Displaying results in graphical format

"""## Load Dataset"""

dataset = pd.read_csv('student_info.csv') #Reading csv file

dataset.shape #Returns total rows and columns

dataset.head() #Displays first 5 records from dataset

dataset.tail() #Displays last 5 records from dataset

"""# Discover and visualize the data to gain insights"""

dataset.info()

dataset.describe() #It applies some default statistical calculations in our dataset

dataset.columns #Returns the available columns

plt.scatter(x=dataset.Hours,y=dataset.Scores) #plt.scatter(dataset['Hours'],dataset['Scores']) or dataset.plot(x='Hours',y='Scores', style='*')
plt.title('Student Mark Prediction')
plt.xlabel('Student Study Hours')
plt.ylabel('Student marks')
plt.show()

"""# Prepare the data for Machine Learning algorithms"""

# Data Cleaning

dataset.isnull().any() #Check for any null value

dataset.isnull().sum() #Returns the sum of total no of null values

dataset.mean()

ds = dataset.fillna(dataset.mean()) #Fill the  null value with mean values

ds.isnull().sum()

#Split Dataset

X = ds.drop("Scores",axis="columns") #Divide data into attributes and labels , X = ds.iloc[:,:-1].values
Y = ds['Scores'].values # Y = ds.drop("Hours",axis="columns") or Y = ds.iloc[:,1]
print("Shape of X = ", X.shape)
print("Shape of y = ", Y.shape)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,random_state=51)
print("Shape of X_train = ", X_train.shape)
print("Shape of y_train = ", Y_train.shape)
print("Shape of X_test = ", X_test.shape)
print("Shape of y_test = ", Y_test.shape)

"""# Select a model and train it"""

# y = m*x + c
from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(X_train,Y_train)

model.coef_

model.intercept_

"""## Fine-tune your model"""

model.score(X_test,Y_test) # Accuracy

plt.scatter(X_train,Y_train)

plt.scatter(X_test, Y_test)
plt.plot(X_train, model.predict(X_train), color = "r")

"""# Save the model"""

import joblib

joblib.dump(model,"student_mark_predictor.pkl")

lr = joblib.load("student_mark_predictor.pkl")
lr.predict([[5]])[0]